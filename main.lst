# file opened: c:\Projects\Z80-Snake\main.asm
  1   0000              		DEVICE ZXSPECTRUM48
  2   0000              		SLDOPT COMMENT WPMEM, LOGPOINT, ASSERTION, OUTPUT
  3   0000
  4   0000              		org	8000h
  5   8000
  6   8000              ; Memory for our block array
  7   8000              ; Max possible size of w * h * 2 (2 = x, y pos)
  8   8000 00 00 00...  SnakePosArray	BLOCK	32*24*2
  9   8600              SnakePosArrayEnd
 10   8600 00 00        SnakeLen	DW	0
 11   8602 00 00        ApplePos	DW	0
 12   8604 00 00        SnakeHeadPos	DW	0
 13   8606 00 01        SnakeDirection	DW	$0100
 14   8608
 15   8608
 16   8608              ; ---------------------------------------------------------------------------
 17   8608              Start
 18   8608 F3           	di
 19   8609
 20   8609 CD FF 86     	call	SetInterrupts
 21   860C
 22   860C              	; Clear the screen
 23   860C
 24   860C 21 00 40     	ld	hl, $4000
 25   860F 01 00 18     	ld	bc, $1800
 26   8612 1E 00        	ld	e, 0
 27   8614 CD C4 86     	call	Clear
 28   8617
 29   8617              	; Clear the snake pos array
 30   8617
 31   8617 21 00 80     	ld	hl, SnakePosArray
 32   861A 01 00 06     	ld	bc, SnakePosArrayEnd - SnakePosArray
 33   861D 1E 00        	ld	e, 0
 34   861F CD C4 86     	call	Clear
 35   8622
 36   8622 FB           	ei
 37   8623              Init
 38   8623              	; Set our snake's initial position and step it while setting the grow flag to make it 3 long
 39   8623
 40   8623 01 08 FF     	ld	bc, $FF08
 41   8626 ED 43 04 86  	ld	(SnakeHeadPos), bc
 42   862A
 43   862A 3E 01        	ld	a, 1
 44   862C CD 69 86     	call	StepSnake
 45   862F CD 69 86     	call	StepSnake
 46   8632 CD 69 86     	call	StepSnake
 47   8635
 48   8635 CD AC 86     	call	PlaceApple
 49   8638
 50   8638              .loop
 51   8638 ED 5F             	ld	a,r
 52   863A D3 FE             	out	(254),a
 53   863C
 54   863C CD 49 86     	call	DrawApple
 55   863F CD 53 86     	call	DrawSnake
 56   8642
 57   8642 AF           	xor	a
 58   8643 CD 69 86     	call	StepSnake
 59   8646
 60   8646 76           	halt
 61   8647 18 EF        	jr	.loop
 62   8649
 63   8649              DrawApple
 64   8649 ED 4B 02 86  	ld	bc,(ApplePos)
 65   864D 3E 24        	ld	a, %00100100
 66   864F CD CC 86     	call	Plot
 67   8652 C9           	ret
 68   8653
 69   8653              DrawSnake
 70   8653 ED 5B 00 86  	ld	de, (SnakeLen)
 71   8657 21 00 80     	ld	hl, SnakePosArray
 72   865A              .lp
 73   865A 4E           	ld	c, (hl)
 74   865B 23           	inc	hl
 75   865C 46           	ld	b, (hl)
 76   865D 23           	inc	hl
 77   865E
 78   865E 3E 00        	ld	a, 0
 79   8660 CD CC 86     	call	Plot
 80   8663
 81   8663 1B           	dec	de
 82   8664 7A           	ld	a, d
 83   8665 B3           	or	e
 84   8666 20 F2        	jr	nz, .lp
 85   8668
 86   8668 C9           	ret
 87   8669
 88   8669              StepSnake
 89   8669 F5           	push	af
 90   866A              	; move the snake in the current direction
 91   866A              	; if a is non-zero then expand the snake
 92   866A
 93   866A              	; Do it the bad way (i.e. NOT using a circular buffer)
 94   866A
 95   866A B7           	or	a
 96   866B 20 17        	jr	nz, .skipMove
 97   866D
 98   866D 21 02 80     	ld	hl, SnakePosArray + 2
 99   8670 11 00 80     	ld	de, SnakePosArray
100   8673 ED 4B 00 86  	ld	bc, (SnakeLen)
101   8677              .lp
102   8677
103   8677              // move xpos
104   8677 7E           	ld	a, (hl)
105   8678 12           	ld	(de), a
106   8679 23           	inc	hl
107   867A 13           	inc	de
108   867B
109   867B              // mode ypos
110   867B 7E           	ld	a, (hl)
111   867C 12           	ld	(de), a
112   867D 23           	inc	hl
113   867E 13           	inc	de
114   867F
115   867F 0B           	dec	bc
116   8680 78           	ld	a, b
117   8681 B1           	or	c
118   8682 20 F3        	jr	nz, .lp
119   8684
120   8684              .skipMove
121   8684 2A 04 86     	ld	hl, (SnakeHeadPos)
122   8687 ED 4B 06 86  	ld	bc, (SnakeDirection)
123   868B
124   868B              	; Add the direction to the position (do each byte separately so a carry on the X doesn't affect the Y etc.)
125   868B 7D           	ld	a, l
126   868C 81           	add	c
127   868D 4F           	ld	c, A
128   868E
129   868E 7C           	ld	a, h
130   868F 80           	add	b
131   8690 47           	ld	b, a
132   8691 ED 43 04 86  	ld	(SnakeHeadPos), bc
133   8695
134   8695 ED 5B 00 86  	ld	de, (SnakeLen)
135   8699 21 00 80     	ld	hl, SnakePosArray
136   869C 19           	add	hl, de
137   869D 19           	add	hl, de
138   869E
139   869E 71           	ld	(hl), c
140   869F 23           	inc	hl
141   86A0 70           	ld	(hl), b
142   86A1
143   86A1 F1           	pop	af
144   86A2
145   86A2 B7           	or	a
146   86A3 C8           	ret	z
147   86A4
148   86A4 2A 00 86     	ld	hl, (SnakeLen)
149   86A7 23           	inc	hl
150   86A8 22 00 86     	ld	(SnakeLen), hl
151   86AB
152   86AB C9           	ret
153   86AC
154   86AC              PlaceApple
155   86AC CD E3 86     	call	Rnd
156   86AF A7 E6 1F     	and	a, 31
157   86B2 32 02 86     	ld	(ApplePos), a
158   86B5              .lp
159   86B5 CD E3 86     	call	Rnd
160   86B8 A7 E6 1F     	and	a, 31
161   86BB BF FE 18     	cp	a, 24
162   86BE 30 F5        	jr	nc, .lp
163   86C0 32 03 86     	ld	(ApplePos+1), a
164   86C3 C9           	ret
165   86C4
166   86C4              Clear
167   86C4 73           	ld	(hl), e
168   86C5 23           	inc	hl
169   86C6 0B           	dec	bc
170   86C7 78           	ld	a, b
171   86C8 B1           	or	c
172   86C9 20 F9        	jr	nz, Clear
173   86CB C9           	ret
174   86CC
175   86CC              Plot
176   86CC              	; Plots a colour character at C = X, B = Y, A = colour
177   86CC              	; doesn't corrupt BC, DE
178   86CC              	; corrupts A
179   86CC
180   86CC E5           	push	hl
181   86CD D5           	push	de
182   86CE F5           	push	af
183   86CF
184   86CF 68           	ld	l, b	; Load the HL register pair with the Y pos
185   86D0 26 00        	ld	h, 0
186   86D2 29           	add	hl, hl	; Multiply it by 32 (raise to the power of 5 by doubling)
187   86D3 29           	add	hl, hl
188   86D4 29           	add	hl, hl
189   86D5 29           	add	hl, hl
190   86D6 29           	add	hl, hl
191   86D7
192   86D7 79           	ld	a, c	; Get the X pos and OR it into L
193   86D8 B5           	or	l
194   86D9 6F           	ld	l, a
195   86DA
196   86DA 11 00 58     	ld	de, $5800	; Ass the base address of the attribute map
197   86DD 19           	add	hl, de
198   86DE
199   86DE F1           	pop	af
200   86DF
201   86DF 77           	ld	(hl), a	; write the value
202   86E0
203   86E0 D1           	pop	de
204   86E1 E1           	pop	hl
205   86E2
206   86E2 C9           	ret
207   86E3
208   86E3              Rnd
209   86E3              	; Awesome randome number generator stolen from the internet
210   86E3
211   86E3 21 80 A2     	ld 	hl,0xA280   ; yw -> zt
212   86E6 11 DE C0             ld 	de,0xC0DE   ; xz -> yw
213   86E9 22 E7 86             ld 	(Rnd+4),hl  ; x = y, z = w
214   86EC 7D                   ld 	a,l         ; w = w ^ ( w << 3 )
215   86ED 87                   add	a,a
216   86EE 87                   add	a,a
217   86EF 87                   add	a,a
218   86F0 AD                   xor	l
219   86F1 6F                   ld 	l,a
220   86F2 7A                   ld 	a,d         ; t = x ^ (x << 1)
221   86F3 87                   add	a,a
222   86F4 AA                   xor	d
223   86F5 67                   ld 	h,a
224   86F6 1F                   rra  	           ; t = t ^ (t >> 1) ^ w
225   86F7 AC                   xor	h
226   86F8 AD                   xor	l
227   86F9 63                   ld 	h,e         ; y = z
228   86FA 6F                   ld 	l,a         ; w = t
229   86FB 22 E4 86             ld 	(Rnd+1),hl
230   86FE C9                   ret
231   86FF
232   86FF              SetInterrupts
233   86FF 21 00 F0     	ld	hl, VectorTable
234   8702 11 13 87     	ld	de, IM2Routine
235   8705 06 80        	ld	b, 128
236   8707
237   8707 7C           	ld	a, h
238   8708 ED 47        	ld	i, a
239   870A              .InterruptLP
240   870A 73           	ld	(hl), e
241   870B 23           	inc	hl
242   870C 72           	ld	(hl), d
243   870D 23           	inc	hl
244   870E 10 FA        	djnz	.InterruptLP
245   8710
246   8710 ED 5E        	im	2
247   8712
248   8712 C9           	ret
249   8713              IM2Routine
250   8713 FB           	ei
251   8714 ED 4D        	reti
252   8716
253   8716              ; Make sure this is on a 256 byte boundary
254   8716              	ORG           $F000
255   F000              VectorTable
256   F000 00 00 00...          defs          256
257   F100
258   F100
259   F100              	savesna "main.sna",Start
260   F100
# file closed: c:\Projects\Z80-Snake\main.asm
